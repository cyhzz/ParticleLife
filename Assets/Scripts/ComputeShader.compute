// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Particle{
    float p_x;
    float p_y;
    float v_x;
    float v_y;
    int group_index;
};
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
// RWTexture2D<float4> Result;
RWStructuredBuffer<Particle> particles;
RWStructuredBuffer<float> gs;
int width;
int total;

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Particle p = particles[id.x];

    float fx = 0;
    float fy = 0;

    float prev_g = 0;

    for(int i=0;i<total;i++){

        Particle b = particles[i];
        float g = gs[p.group_index*width+b.group_index];

        // if(g!=prev_g){
        //     p.v_x = (p.v_x + fx) * 0.5f;
        //     p.v_y = (p.v_y + fy) * 0.5f;
        //     fx=0;
        //     fy=0;
        // }

        float dx = p.p_x - b.p_x;
        float dy = p.p_y - b.p_y;
        float d = sqrt(dx * dx + dy * dy);

        float F = 0;

        // if(d>0&&d<7){
        //      F = g * 1/d;
        // }

        if (d>0 && d < 1)
        {
            F = 1-d;
        }
        if(d>=1&&d<4.0f){
             F = (d-1)/3.0f * g;
        }
        if(d>4.0f&&d<7.0f){
             F = (1- (d-4.0f)/3.0f) * g;
        }

        fx += (F * dx);
        fy += (F * dy);

        prev_g = g;
    }

    p.v_x = (p.v_x + fx) *0.97f;
    p.v_y = (p.v_y + fy) *0.97f;

    particles[id.x]=p;
}
